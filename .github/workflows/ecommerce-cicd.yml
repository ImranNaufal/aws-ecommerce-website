name: E-commerce CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-1
  PROJECT_NAME: mini-ecommerce
  NODE_VERSION: '18'

jobs:
  # Frontend CI/CD
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint:check
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: frontend-test
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        REACT_APP_API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
        REACT_APP_AWS_REGION: ${{ env.AWS_REGION }}
        REACT_APP_IMAGES_BUCKET: ${{ secrets.IMAGES_BUCKET }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 7

  # Backend CI/CD
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run linting
      run: |
        cd backend
        npm run lint:check
    
    - name: Run tests
      run: |
        cd backend
        npm test
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
        DYNAMODB_ENDPOINT: http://localhost:8000

  # Infrastructure Deployment
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy main infrastructure
      run: |
        aws cloudformation deploy \
          --template-file infrastructure/main-stack.yml \
          --stack-name ${{ env.PROJECT_NAME }}-${{ github.ref_name }}-infrastructure \
          --parameter-overrides \
            ProjectName=${{ env.PROJECT_NAME }} \
            Environment=${{ github.ref_name }} \
            KeyPairName=${{ secrets.EC2_KEY_PAIR }} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}
    
    - name: Deploy database infrastructure
      run: |
        aws cloudformation deploy \
          --template-file infrastructure/database-stack.yml \
          --stack-name ${{ env.PROJECT_NAME }}-${{ github.ref_name }}-database \
          --parameter-overrides \
            ProjectName=${{ env.PROJECT_NAME }} \
            Environment=${{ github.ref_name }} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}

  # Frontend Deployment
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [frontend-build, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/
    
    - name: Get S3 bucket name
      id: get-bucket
      run: |
        BUCKET_NAME=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.PROJECT_NAME }}-${{ github.ref_name }}-infrastructure \
          --query "Stacks[0].Outputs[?OutputKey=='StaticWebsiteBucket'].OutputValue" \
          --output text \
          --region ${{ env.AWS_REGION }})
        echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
    
    - name: Deploy to S3
      run: |
        aws s3 sync frontend/build/ s3://${{ steps.get-bucket.outputs.bucket-name }} \
          --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "*.html" \
          --region ${{ env.AWS_REGION }}
        
        # Upload HTML files with no-cache
        aws s3 sync frontend/build/ s3://${{ steps.get-bucket.outputs.bucket-name }} \
          --cache-control "no-cache" \
          --include "*.html" \
          --region ${{ env.AWS_REGION }}
    
    - name: Invalidate CloudFront (if exists)
      run: |
        DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.PROJECT_NAME }}-${{ github.ref_name }}-infrastructure \
          --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
          --output text \
          --region ${{ env.AWS_REGION }} 2>/dev/null || echo "")
        
        if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*" \
            --region ${{ env.AWS_REGION }}
        fi

  # Backend Deployment
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [backend-test, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create deployment package
      run: |
        cd backend
        zip -r ../backend-deployment.zip . -x "node_modules/*" "*.git*" "tests/*"
    
    - name: Upload to S3
      run: |
        DEPLOYMENT_BUCKET=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.PROJECT_NAME }}-${{ github.ref_name }}-infrastructure \
          --query "Stacks[0].Outputs[?OutputKey=='DeploymentBucket'].OutputValue" \
          --output text \
          --region ${{ env.AWS_REGION }} 2>/dev/null || echo "")
        
        if [ ! -z "$DEPLOYMENT_BUCKET" ] && [ "$DEPLOYMENT_BUCKET" != "None" ]; then
          aws s3 cp backend-deployment.zip s3://$DEPLOYMENT_BUCKET/backend-$(date +%Y%m%d-%H%M%S).zip \
            --region ${{ env.AWS_REGION }}
        fi
    
    - name: Deploy to EC2 instances
      run: |
        # Get Auto Scaling Group name
        ASG_NAME="${{ env.PROJECT_NAME }}-${{ github.ref_name }}-asg"
        
        # Create new launch template version
        aws ec2 create-launch-template-version \
          --launch-template-name "${{ env.PROJECT_NAME }}-${{ github.ref_name }}-template" \
          --source-version '$Latest' \
          --launch-template-data '{"UserData":"'$(base64 -w 0 scripts/deploy-backend.sh)'"}' \
          --region ${{ env.AWS_REGION }}
        
        # Update Auto Scaling Group to use new template version
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $ASG_NAME \
          --launch-template "LaunchTemplateName=${{ env.PROJECT_NAME }}-${{ github.ref_name }}-template,Version=\$Latest" \
          --region ${{ env.AWS_REGION }}
        
        # Trigger instance refresh
        aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $ASG_NAME \
          --preferences '{"InstanceWarmup":300,"MinHealthyPercentage":50}' \
          --region ${{ env.AWS_REGION }}

  # Health Checks and Notifications
  health-check:
    name: Health Check & Notifications
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get deployment URLs
      id: get-urls
      run: |
        WEBSITE_BUCKET=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.PROJECT_NAME }}-${{ github.ref_name }}-infrastructure \
          --query "Stacks[0].Outputs[?OutputKey=='StaticWebsiteBucket'].OutputValue" \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        WEBSITE_URL="http://$WEBSITE_BUCKET.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT
    
    - name: Health check
      run: |
        echo "Performing health checks..."
        
        # Check website
        if curl -f -s "${{ steps.get-urls.outputs.website-url }}" > /dev/null; then
          echo "✅ Website is accessible"
        else
          echo "❌ Website health check failed"
          exit 1
        fi
        
        # Check API (if ALB exists)
        API_URL=$(aws elbv2 describe-load-balancers \
          --names "${{ env.PROJECT_NAME }}-${{ github.ref_name }}-alb" \
          --query "LoadBalancers[0].DNSName" \
          --output text \
          --region ${{ env.AWS_REGION }} 2>/dev/null || echo "")
        
        if [ ! -z "$API_URL" ] && [ "$API_URL" != "None" ]; then
          if curl -f -s "http://$API_URL/health" > /dev/null; then
            echo "✅ API is healthy"
          else
            echo "❌ API health check failed"
            exit 1
          fi
        fi
    
    - name: Send success notification
      if: success()
      run: |
        aws sns publish \
          --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
          --subject "✅ E-commerce Deployment Successful" \
          --message "Deployment completed successfully!
        
        🌐 Website: ${{ steps.get-urls.outputs.website-url }}
        📊 Dashboard: https://${{ env.AWS_REGION }}.console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#dashboards:name=${{ env.PROJECT_NAME }}-${{ github.ref_name }}-dashboard
        
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        Actor: ${{ github.actor }}" \
          --region ${{ env.AWS_REGION }}
    
    - name: Send failure notification
      if: failure()
      run: |
        aws sns publish \
          --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
          --subject "❌ E-commerce Deployment Failed" \
          --message "Deployment failed!
        
        🔍 Check the GitHub Actions logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        Actor: ${{ github.actor }}" \
          --region ${{ env.AWS_REGION }}
