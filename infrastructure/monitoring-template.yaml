AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudWatch Monitoring and SNS Notifications for E-commerce Website'

Parameters:
  ProjectName:
    Type: String
    Default: 'mini-ecommerce'
    Description: 'Name of the project'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'

  NotificationEmail:
    Type: String
    Description: 'Email address for alerts and notifications'
    Default: 'admin@example.com'

Resources:
  # SNS Topic for Alerts
  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${Environment}-alerts'
      DisplayName: 'E-commerce Website Alerts'
      
  # SNS Subscription for Email Notifications
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref AlertsTopic
      Endpoint: !Ref NotificationEmail

  # CloudWatch Log Group for Application Logs
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${ProjectName}-${Environment}'
      RetentionInDays: 14

  # CloudWatch Log Group for Access Logs
  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${ProjectName}-${Environment}-access'
      RetentionInDays: 30

  # CloudWatch Alarm for High CPU Usage
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-high-cpu'
      AlarmDescription: 'Alert when CPU usage is high'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertsTopic
      TreatMissingData: notBreaching

  # CloudWatch Alarm for High Memory Usage
  HighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-high-memory'
      AlarmDescription: 'Alert when memory usage is high'
      MetricName: MemoryUtilization
      Namespace: CWAgent
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertsTopic

  # CloudWatch Alarm for Application Errors
  ApplicationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-app-errors'
      AlarmDescription: 'Alert when application errors occur'
      MetricName: ErrorCount
      Namespace: !Sub '${ProjectName}/Application'
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertsTopic

  # CloudWatch Alarm for DynamoDB Throttling
  DynamoDBThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-dynamodb-throttle'
      AlarmDescription: 'Alert when DynamoDB requests are throttled'
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlertsTopic

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-${Environment}-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "i-1234567890abcdef0" ],
                  [ ".", "NetworkIn", ".", "." ],
                  [ ".", "NetworkOut", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "ap-southeast-1",
                "title": "EC2 Instance Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${ProjectName}-products" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "ap-southeast-1",
                "title": "DynamoDB Metrics",
                "period": 300
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/ec2/${ProjectName}-${Environment}' | fields @timestamp, @message\n| filter @message like /ERROR/\n| sort @timestamp desc\n| limit 20",
                "region": "ap-southeast-1",
                "title": "Recent Application Errors",
                "view": "table"
              }
            }
          ]
        }

  # Custom Metric Filter for Application Errors
  ErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ApplicationLogGroup
      FilterPattern: '[timestamp, request_id, level="ERROR", ...]'
      MetricTransformations:
        - MetricNamespace: !Sub '${ProjectName}/Application'
          MetricName: 'ErrorCount'
          MetricValue: '1'
          DefaultValue: 0

  # Custom Metric Filter for API Response Time
  ResponseTimeMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ApplicationLogGroup
      FilterPattern: '[timestamp, request_id, level, method, url, status_code, response_time]'
      MetricTransformations:
        - MetricNamespace: !Sub '${ProjectName}/Application'
          MetricName: 'ResponseTime'
          MetricValue: '$response_time'
          DefaultValue: 0

Outputs:
  AlertsTopicArn:
    Description: 'ARN of the SNS topic for alerts'
    Value: !Ref AlertsTopic
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alerts-topic'

  DashboardURL:
    Description: 'URL of the CloudWatch Dashboard'
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${Environment}-dashboard'

  LogGroupName:
    Description: 'Name of the application log group'
    Value: !Ref ApplicationLogGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-log-group'
