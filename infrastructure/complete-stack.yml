AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete E-commerce Infrastructure Stack'

Parameters:
  ProjectName:
    Type: String
    Default: 'mini-ecommerce'
    Description: 'Name of the project'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'

Resources:
  # DynamoDB Table for Products
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-products'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-products'

  # DynamoDB Table for Users
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-users'

  # DynamoDB Table for Orders
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-orders'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserOrdersIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-orders'

  # DynamoDB Table for Cart
  CartTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-cart'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: productId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: productId
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-cart'

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt ProductsTable.Arn
                  - !Sub '${ProductsTable.Arn}/index/*'
                  - !GetAtt UsersTable.Arn
                  - !Sub '${UsersTable.Arn}/index/*'
                  - !GetAtt OrdersTable.Arn
                  - !Sub '${OrdersTable.Arn}/index/*'
                  - !GetAtt CartTable.Arn

  # Products Lambda Function
  ProductsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-products'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          PRODUCTS_TABLE: !Ref ProductsTable
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          
          const sampleProducts = [
            {
              productId: 'prod-001',
              name: 'Premium Laptop',
              description: 'High-performance laptop with latest specs and premium build quality',
              price: 999.99,
              category: 'Electronics',
              imageUrl: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=400',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
              isActive: true
            },
            {
              productId: 'prod-002',
              name: 'Smart Fitness Watch',
              description: 'Advanced fitness tracker with heart rate monitoring and GPS',
              price: 299.99,
              category: 'Electronics',
              imageUrl: 'https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=400',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
              isActive: true
            },
            {
              productId: 'prod-003',
              name: 'Wireless Bluetooth Headphones',
              description: 'Premium noise-cancelling wireless headphones with 30-hour battery life',
              price: 199.99,
              category: 'Electronics',
              imageUrl: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=400',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
              isActive: true
            },
            {
              productId: 'prod-004',
              name: 'Organic Cotton T-Shirt',
              description: 'Comfortable 100% organic cotton t-shirt available in multiple colors',
              price: 29.99,
              category: 'Clothing',
              imageUrl: 'https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
              isActive: true
            },
            {
              productId: 'prod-005',
              name: 'Professional Coffee Maker',
              description: '12-cup programmable coffee maker with thermal carafe',
              price: 149.99,
              category: 'Home & Kitchen',
              imageUrl: 'https://images.unsplash.com/photo-1495474472287-4d71bcdd2085?w=400',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
              isActive: true
            },
            {
              productId: 'prod-006',
              name: 'Gaming Mechanical Keyboard',
              description: 'RGB backlit mechanical gaming keyboard with blue switches',
              price: 129.99,
              category: 'Electronics',
              imageUrl: 'https://images.unsplash.com/photo-1541140532154-b024d705b90a?w=400',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
              isActive: true
            },
            {
              productId: 'prod-007',
              name: 'Bluetooth Speaker Portable',
              description: 'Waterproof portable Bluetooth speaker with 20-hour battery',
              price: 79.99,
              category: 'Electronics',
              imageUrl: 'https://images.unsplash.com/photo-1608043152269-423dbba4e7e1?w=400',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
              isActive: true
            },
            {
              productId: 'prod-008',
              name: 'Yoga Mat Premium',
              description: 'Non-slip premium yoga mat with carrying strap',
              price: 49.99,
              category: 'Sports',
              imageUrl: 'https://images.unsplash.com/photo-1544367567-0f2fcb009e0b?w=400',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
              isActive: true
            }
          ];
          
          exports.handler = async (event) => {
            console.log('Event:', JSON.stringify(event, null, 2));
            
            const headers = {
              'Content-Type': 'application/json',
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
              'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
            };
            
            try {
              if (event.httpMethod === 'OPTIONS') {
                return {
                  statusCode: 200,
                  headers,
                  body: ''
                };
              }
              
              if (event.httpMethod === 'GET') {
                return {
                  statusCode: 200,
                  headers,
                  body: JSON.stringify({
                    success: true,
                    data: sampleProducts
                  })
                };
              }
              
              return {
                statusCode: 405,
                headers,
                body: JSON.stringify({ error: 'Method not allowed' })
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ 
                  error: 'Internal server error',
                  message: error.message 
                })
              };
            }
          };

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-api'
      Description: 'E-commerce API Gateway'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'api'

  # Products Resource
  ProductsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ApiResource
      PathPart: 'products'

  # Products Method
  ProductsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProductsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsLambda.Arn}/invocations'

  # Lambda Permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductsLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProductsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-api-url'

  ProductsTableName:
    Description: 'Products DynamoDB Table Name'
    Value: !Ref ProductsTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-products-table'

  UsersTableName:
    Description: 'Users DynamoDB Table Name'
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-users-table'

  OrdersTableName:
    Description: 'Orders DynamoDB Table Name'
    Value: !Ref OrdersTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-orders-table'

  CartTableName:
    Description: 'Cart DynamoDB Table Name'
    Value: !Ref CartTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cart-table'
